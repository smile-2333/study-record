#+TITLE:  SQL
#+STARTUP: indent
* sql command
** Variable
*** System Variable
所有变量设置再重启后会失效，如果需要持久保持，需要配置文件配置
**** Global
- read
show global variables;
show global variables like '%version%';
show global variables where variable_name like 'character%';
show global variables where variable_name like '%log%' and value='off';

- write, just affect after newly session
SET GLOBAL var_name = value;
SET @@GLOBAL.var_name = value;
**** Session
- read
show session variables; -- show variables; 不指定则从session拿

- write(affect current session)
SET SESSION var_name = value;
SET @@SESSION.var_name = value;
**** concrete
select @@global.back_log;
select @@session.basedir; -- 存储过程如果需要使用，也是适用@@xxx.xxx
*** State Variable(Read-only)
**** Global
show global status;
**** Session
show status;
** 用户管理语句
*** prepare
MySQL账户格式: username@host
root@'10.1.%.%'
*** query
select * from mysql.`user`;
*** craete
create user 'hj1'@127.0.0.1;
create user 'hj2'@'127.0.0.1' identified by '111111';

-- 授权的时候如果没有，会被创建
grant all on test.* to hj3@127.0.0.1 identified by '111111';
*** delete
-- 权限没有回收，在再次创建用户时，可能会出问题，可以flush privileges刷新
delete from mysql.user where user like '%xxx%'

-- 完全删除全部相关
drop user hj2@127.0.0.1;
*** rename
rename user hj1@127.0.0.1 to hj5@127.0.0.1;
*** password
**** terminal
-- 记得密码才改密码的情况
mysqladmin -uroot -p123123 password 123456

-- 刚初始化，还没有密码，直接指定密码
mysqladmin -uroot password 123456
**** after login
set password for hj3@127.0.0.1 = password('88888');
-- 直接改表(需要确定版本)
update mysql.`user` set password = password('11111') where user = 'hj3'; -- before 5.7
update mysql.`user` set authentication_string = password('22222') where user = 'hj3'; -- 5.7 and after
**** reset
1. 停止服务
2. mysqld_safe --skip-grant-tables &
3. mysql -uroot
4. 用通过语法或者改表的方法改密码
5. flush privilege
6. restart
*** 授权相关
**** grant
-- identified by 会更改对应账号的密码
grant all privileges on test.* to hj3@127.0.0.1 (identified by '123123')
flush privileges

-- 特定权限
grant select on test.* to hj2@127.0.0.1

-- 一次授权多个用户
grant select,insert,update,delete on test.* to hj1@127.0.0.1,hj2@127.0.0.1

-- 更小粒度，具体到字段
grant select(name,age) on test.* to hj1@127.0.0.1

-- 表名可能与函数/存储过程/视图同名，操作类似
grant execute on function/procedure/view test.* to hj1@127.0.0.1

-- 强制用户ssl建立会话/取消限制
grant usage on *.* to hj@127.0.0.1 require ssl;
grant usage on *.* to hj@127.0.0.1 require none;

-- 被授权的用户是否可以在授权给别的用户
grant select on test.* to hj2@127.0.0.1 with grant option;

-- 额外配置
MAX_QUERIES_PER_HOUR：限制用户每小时执行的查询语句数量；
MAX_UPDATES_PER_HOUR：限制用户每小时执行的更新语句数量；
MAX_CONNECTIONS_PER_HOUR：限制用户每小时连接数据库的次数；
MAX_USER_CONNECTIONS：限制用户使用当前账号同时连接服务器的连接数量；

上述各限制选项的示例如下。
grant select on *.* to zsy@'192.168.%.%' identified by '123456' with max_queries_per_hour 20;
grant select on *.* to zsy@'192.168.%.%' identified by '123456' with max_updates_per_hour 10;
grant select on *.* to zsy@'192.168.%.%' identified by '123456' with max_connections_per_hour 15;
grant select on *.* to zsy@'192.168.%.%' identified by '123456' with max_user_connections 2;
**** query
-- 看用户对哪些库有哪些权限
show grant for hj@127.0.0.1;

-- 看某个库授权了哪些权限给了哪些用户
select * from mysql.db where `Db` = 'test';
**** 收回
-- 全收回
revoke all on test.* from hj2@127.0.0.1;

-- 收回一部分
revoke select,update on test.* from hj3@127.0.0.1;
** 库管理语句
选了字符集可以在从多个排序规则中选一个，但是选了一个排序规则直接决定了是什么字符集，因为排序规则是字符集为基准的
*** create
create database testdb;
create database if not exists testdb;
create database if not exists testdb default character set utf16;
*** query
show databases;

-- 查看建立库的语句
show create database testdb;

-- 查看支持的字符集
show character set;

-- 查看排序
show collation;

-- 查看当前连接的概要信息
status;
*** update
alter database testdb character set utf8;

-- 该库下的所有表默认使用该字符集
alter database testdb default character set utf8;
** 表管理语句
*** query
show tables;
-- 查看的表信息包括每张表的名称，所使用的存储引擎，版本，字符集，描述信息，创建时间等信息
show table status;

-- 查看students表的字段，类型，表结构。
desc student;

-- 查看建表语句
show create table student;
*** create
CREATE TABLE [IF NOT EXISTS] tbl_name (create_definition,...)

我们可以把上述语法分为两个部分查看：
- 前半部分为create table [IF NOT EXISTS] tbl_name ，很容易理解，create table是关键字，表示创建表，tbl_name为表名， [IF NOT EXISTS]为可选的，表示如果表不存在时才创建。
- 后半部分为(create_definition,...)，首先要注意的是，create_definition需要被括号括起来。
那么我们来看看create_definition中都包含什么，我们可以将create_definition中的定义分为如下几类：字段定义、表级别约束定义、索引定义。

create table test(
id int(11),
name varchar(60)
)

-- 定义字段顺便指定主键
create table test1(
id int(11)key,
name varchar(60) not null comment 'student name'
)

-- 后指定主键
create table test2(
id int(11),
name varchar(60) not null comment 'student name',
primary key(id)
)

-- 联合主键
create table test3(
id int(11),
name varchar(60) not null comment 'student name',
primary key(id,name)
)

-- 指定外键
create table test4(
id int(11),
name varchar(60),
tid int,
foreign key(tid) references test1(id)
)

-- key 和 index 都可以用于创建索引
create table test5(
id int(11),
name varchar(60),
key ind_name(name),
index ind_id(id)
)

-- 复制表数据，结构会丢失
create table test6 select * from test1;

-- 复制表结构
create table test7 like test5;
*** delete
drop table test7;
*** update
-- 改表名
alter table test2 rename as test8;

-- 加字段(字段后与定义表字段类似，可指定约束)
alter table test8 add column age int;

-- 字段添加位置
alter table test8 add column iid int first; -- 加到第一个
alter table test8 add column cid int after name;  -- name字段之后

-- 删字段
alter table test8 drop cid;

-- 字段改名
alter table test8 change name3 name char(5);

-- 字段类型更改
alter table test8 modify name int;
** 约束管理、索引管理、键管理语句
- primary key
- unique key
- foreign key
*** 非空约束
alter table testdb modify name varchar(100) not null;
alter table testdb modify name varchar(100) null;
*** 自动增长
alter table testdb modify id int auto_increment;
alter table testdb change id int auto_increment;
*** 删除自动增长
alter table testdb modify id int;
alter table testdb change id int;
*** 主键约束
alter table testdb add primary key(id)

-- 如果存在自动增长，需要先取消自动增长，才可以取消主键
alter table testdb drop primary key
*** 唯一键约束
-- 索引名以uid_，开始后跟数字，可以重复对某个字段进行创建unique key(不建议)
alter table testdb add unique key(uid);

-- 指定对应的索引名
alter table testdb add unique key uni_test(uid);

-- 取消索引
alter table drop index uni_test;
*** 查看约束
select * from information_schema.`KEY_COLUMN_USAGE` where `TABLE_NAME` = 'test1';

desc test1

-- 看自己拿了哪些表的主键作为自己的外键
select `TABLE_NAME`,`COLUMN_NAME`,`CONSTRAINT_NAME`,`REFERENCED_TABLE_NAME`,`REFERENCED_COLUMN_NAME` from information_schema.`KEY_COLUMN_USAGE` where `TABLE_NAME` ='test1' and `REFERENCED_TABLE_NAME` is not null;

-- 看自己被哪些表的外键所引用
select `TABLE_NAME`,`COLUMN_NAME`,`CONSTRAINT_NAME`,`REFERENCED_TABLE_NAME`,`REFERENCED_COLUMN_NAME` from information_schema.`KEY_COLUMN_USAGE` where `REFERENCED_TABLE_NAME`='test1'
*** 外键约束
alter table test1 add column tid int default 0 not null;
alter table test1 add constraint test1_tid_fk foreign key(tid) references test2(id)

-- 去除约束
alter table test4 drop foreign key test1_tid_fk;
*** 索引管理
alter table test1 add index ind_name(name)

-- 创建索引
create index_ind_name on testtb(name(20) desc);
create index_ind_name on testtb(name(20));
create index_ind_name on testtb(name);

-- 联合索引
create index ind_name on testtb(name(20) desc);
create index ind_name on testtb(name(20));
create index ind_name on testtb(name);

-- 重建索引(mariadb的innodb不支持重建)
repair table test1 quick;

-- 删除索引
alter table test2 drop index ind_name;

-- 查看索引
show index from test1;
show index from test1 where key_name like '%xxx%';
** 视图管理
视图是一个虚表的概念，不存在实际存储的数据格式(每次访问视图时，通过执行视图对应的SQL语句来进行展示，目的，更灵活的将复杂SQL封装起来，方便以SQL语句为粒度进行授权)
*** create
create view test1View as select id from test1;
select * from test1view;

-- 指定视图的字段名
create or replace view testvi(a,b) as select * from classes where classid<=4;
*** 支持的算法
- merge 将视图的sql语句与我们对视图的sql语句合并在执行，可以增删改查，效率低
- temptable 先查询后置放结果在临时表，在调用我们的sql语句去执行，只能查
- undefinded 系统自动设置，更倾向于merge

*** delete
drop view test1view;
drop view test1view if exists testview;
*** update
alter view test1view as select * from test2
*** 不可更新关联表的情况
- 当视图设定了 ALGORITHM = TEMPTABLE。
- 聚合函数（SUM(), MIN(), MAX(), COUNT()等）。
- 位于选择列表中的子查询。
- FROM子句中存在不可更新视图。
- WHERE子句中的子查询，引用FROM子句中的表。
- 仅引用文字值（此时没有要更新的基表）。
- 基表中的其他字段中的约束不被满足。
- DISTINCT
- GROUP BY
- HAVING
- UNION 或 UNION ALL
- Join
** insert语句
-- 值与指定的字段必须匹配
insert into tablename(字段1名称,字段2名称,...) values(字段1值,字段2值,...)

-- 更灵活一点
insert into tablename set 字段1名称=字段1值,字段2名称=字段2值

-- sql_mode变量控制数据插入时的数据校验，比如定义一个字段类型为varchar(500)，当输出超过500时，不会报错，被其自动截断，如果要强制严格校验，将global.sql_mode变量的值设置为TRADITIONAL（使用的存储引擎为innodb），同时在配置文件中设置sql_mode=TRADITIONAL（使用的存储引擎为innodb），以免重启后失效
sql_mode最常用的几种重要模式如下：
ANSI：宽松模式，对插入数据进行校验，如果不符合定义类型或长度，对数据截断保存，报警告信息，默认应该就是这种。
STRICT_TRANS_TABLES：只在事务型表中进行严格限制。
STRICT_ALL_TABLES：对所有表进行严格限制。
TRADITIONAL ：严格模式，当插入数据时，进行数据的严格校验，错误的数据将不能被插入，报error错误。用于事物时，会进行事物的回滚，官方提醒我们说，如果我们使用的存储引擎是非事务型的存储引擎（比如myisam），当我们使用这种模式时， 如果执行非法的插入或更新数据操作时，可能会出现部分完成的情况。

-- 用select出来的结果进行批量插入
#+BEGIN_SRC sql
insert into organization_employee(employee_id,org_id)
select
        o.user_id,
        o.org_id
from
        organization o
left join organization_employee oe on
        o.org_id = oe.org_id
        and o.user_id = oe.employee_id
where
        oe.employee_id is null and o.user_id is not null;
#+END_SRC

** delete与update常用语句
*** delete
-- 清空test1表的数据
delete from test1

-- 匹配后删除
delete from test1 where id=1 or name = 2

-- 从tb1表中找出age>30的数据行，然后将这些行按照age进行降序排列，排列后删除第一个。
delete from test1 where age >30 order by age desc limit 1
*** update

-- 设置test1表数据name的字段全部改为2
update test1 set name = '2'

-- 条件匹配
update test1 set name = '2' where id = 3

-- 多字段设置
update test1 set name = 2, age=100 where id=4

-- 连表信息更新
update test1,tes2 set test1.age=test.age where test1.id=test.id
** select语句
*** 通配符like
- % 任意长的字符串
- _ 同%，但是代表单个字符
-
*** 正则rlike
select * from student where name rlike '^t.*'
*** 排序(不指定默认从小到大，小大的概念依据选中的排序规则或者字符集)
select * from test1 order by name desc

select * from test1 order by name desc,age desc
*** 去重
select distinct name from test1
*** 分组
min(col)返回指定列的最小值
max(col)返回指定列的最大值
avg（col）返回指定列的平均值
count（col）返回指定列中非null值的个数
sum（col）返回指定列的所有值之和
group_concat(col)返回指定列拼串值

-- having关键字
select classId,avg(age) as ageavg from students group by classId having ageavg >25
*** 多表查询
**** 内连接
***** cross join
select * from t1,t2

-- 正式写法
select * from t1 cross join t2
***** inner join(the cross join with condition)

-- 正式写法
select * from t1 cross join t2 on t1.id = t2.id
**** 外连接
select * from t1 left (ouetr) join t2 on t1.id = t2.id
select * from t1 right (outer) join t2 on t1.id = t2.id
**** 全连接
-- mysql不直接支持，但是可以通过机制完成
select * from t1 left (ouetr) join t2 on t1.id = t2.id
union
select * from t1 right (outer) join t2 on t1.id = t2.id
*** 联合查询
**** union
-- 要求字段数一致，重复的数据会被合并为一条
select column_name(s) from table_name1 UNION select column_name(s) from table_name2
**** unionall
-- 同union，但是重复的数据不会被合并
select column_name(s) from table_name1 UNION select column_name(s) from table_name2
* 事务相关
** 概述
- A：atomicity    原子性
- C：consistency   一致性
- I：isolation    隔离性
- D：durability   持久性

原子性：整个事务中的所有操作要么全部执行成功，要么全部执行失败后混滚到最初状态。
一致性：数据库总是从一个一致性状态转为另一个一致性状态。
隔离性：一个事务在提交之前所做出的的操作是否能为其他事务可见，由于不同的场景需求不同，所以针对隔离性来说，有不同的隔离级别。
持久性：事务一旦提交，事务所做出的修改将会永久保存，此时即使数据库崩溃，修改的数据也不会丢失。
** 原理
redo log和undo log严格来讲是innodb的产物，而binlog则是MySQL的通用特性
- redolog
记录事务的操作，保证如果事务停止了一下子之后，可以从该文件读取剩下的sql操作记录，进行继续进行，保证原子性
- undolog
如果长时间事务进行一般失败了，undo存放在数据库内部的特殊段中，这个段被称为undo段（undo segment），undo段位于共享表空间中
- log group
redo log的逻辑组概念，定义了可以有多少了个redo log file, 依次从第一次redo log file开始写，写满了就第二个，最后一个写满了，则从第一个开始，所以需要保持redo log file的大小和log group的大小控制
** 相关语句
start transaction

commit

rollback

savepoint xxx (xxx为保存点名字，类似与存档)

rollback to savepoint

release savepoint xxx 表示删除一个保存点

MySQL默认是自动提交事务，可以设置set @@session.autocommit=0取消自动提交事务
** 事务隔离级别
READ-UNCOMMITTED : 此隔离级别翻译为 "读未提交"。导致脏读、幻读、不可重读

READ-COMMITTED : 此隔离级别翻译为 "读已提交" 或者 "读提交"。 只有当其他终端commit之后，才能读到，不可重读(不一定可以重新读到)，当本终端无操作时，其他终端的commit可以影响当前终端

REPEATABLE-READ : 此隔离级别翻译为 "可重复读" 或者 "可重读"。 多个终端根据情景读取undo段作为快照，可能出现幻读

SERIALIZABLE : 此隔离级别翻译为"串行化"。直接加锁，持久化，多个其他终端大概率会超时，完全符合ACID
* index
** clustered index
一个表一个，一个键对一个数据行的指针
** secondary index
根据条件，存的是主键的位置，所以根据这种查，如果需要额外的字段，会回表查询(先拿到主键，在查一波)
** 触发条件
1. 最左条件匹配
** covering index
在联合索引的情况下，如果不取出额外联合索引额外的字段，不会触发回表
* 杂项
** 优化手段
1. 加索引，目的是划分区间，where或者group by的字段
2. 少用*，限定字段选择，提高返回速度
3. 先用索引缩小范围在用其他的指令，如like，null判断，和or，等
4. 动态SQL，如in列表进行拼
6. where表达式不要左侧运算
7. 不要用where 1=1，动态SQL判断有条件自动加where...和and
8. covering index
** undocument
*** ref
http://www.zsythink.net/archives/category/%e5%ad%98%e5%82%a8/mysql/
*** 最左匹配
*** 索引原理
* convention
1. SQL命令大写，库名/表名小写(或者至少风格保持一致)
* data type
** general
CHAR, VARCHAR, BLOB, INT, DEC, DATE, and DATETIME
* trick
** 确定分组后，每个分组是否存在特定的值
// 例子为一个question对应多个tag，给定一个tag_id,提示提问是否包含或者不包含(多个同理，应用对应的拼串技术即可)
select * from question q inner join question_tag qt on q.question_id = qt.question group by q.question_id having max(case qt.tag_id when xx then 1 else 0)=0
** 打印用于数据表描述的三线表
select
IFNULL(NULL, '')
	'名称',
	column_name '代码',
	IF(COLUMN_KEY = 'PRI',
	'是',
	'否') '外键',
	IF(1 = 1,
	'否',
	'是')'主键',
	COLUMN_TYPE '数据类型'
from
	information_schema.columns
where
	table_schema = 'chatroom'
	and table_name = 'private_chat' ;
** 单一列进行合并
SET SESSION group_concat_max_len = 102400; 设置当前session的group by大小，因为可能拼床后溢出，数据丢失
SELECT GROUP_CONCAT(CONCAT('\'', question_id , '\'')) question_id from question ; 把主键列表进行合并
SELECT GROUP_CONCAT(CONCAT('select * from question where question_id =', question_id , '') SEPARATOR ' union\r\n') question_id from question ; 拼出select * from xx where 主键=xx union xxx
** escape '
\'
''
* table
** select
SELECT [*/column_name] FROM [tableName] [alias] WHERE [condition with AND or OR]
*** ORDER BY [field [DESC][,second field [DESC]]]
*** GROUP BY [field]
*** DISTINCT
*** LIMIT
LIMIT [[offset],size]
** delete
DELETE FROM [tableName] [alias] where [condtion like select]
** update
UPDATE [tableName] [alias] SET [column_name] = [value that may be calculate] WHERE [condtion]
** insert
INSERT INTO [tableName] (fieldOrders) VALUES([fieldValues])
** create
CREATE TABLE [tableName]([definitionList]);
*** option
**** PRIMARY KEY([column_name])
**** NOT NULL
**** DEFAULT [value that could be NULL or else]
**** AUTO INCREMENT
** structure
*** DESC [tableName]
*** DROP TABLE [tableName]
*** ALTER
ALTER TABLE [tableName]
**** RENAME TO [newTableName],
**** ADD COLUMN [column definition],
**** CHANGE COLUMN [columnName] [column definition],
**** MODIFY COLUMN [column definition]
**** DROP [element such as index/column/pk]
* CONSTRAINT
** create
** alter
ADD CONSTRAINT CHECK condition
* view
#+BEGIN_SRC sql
CREATE VIEW web_designer AS
--select statement
#+END_SRC
* condition reserved word
** <
** >
** <=
** >=
** BETWEEN
** IS
** IN
** LIKE
** NOT
对条件取反
WHERE NOT name LIKE '%xx'
WHERE NOT name IN ('%xx') //NOT IN也行，唯一的特例
* function
** general
*** RIGHT([columnName],bound)
*** LEFT([columnName],bound)
*** SUBSTRING_INDEX([columnName],[targetChar],[whichTargetChar])
'aaaa,bbb,cc' ==> aaaa
*** UPPER
*** LOWER
*** REVERSE
*** LTRIM
*** RTRIM
*** LENGTH
** group
*** SUM
*** AVG
*** MIN
*** MAX
*** COUNT
* NF
** 1NF
Columns contain only atomic values
Not in 1NF
| toy_id | toy        | colors            |
|--------+------------+-------------------|
|      5 | whiffeball | white,yellow,blue |
|      6 | frisbee    | green,yellow      |
|      9 | kite       | red,blue,green    |
|     12 | yoyo       | white,yellow      |
Still not in 1NF，because all color column have same meaning, they aren't atomic
| toy_id | toy        | color1 | color2 | color3 |
|--------+------------+--------+--------+--------|
|      5 | whiffeball | white  | yellow | blue   |
|      6 | frisbee    | green  | yellow |        |
|      9 | kite       | red    | blue   | green  |
|     12 | yoyo       | white  | yellow |        |
Finally 1NF
| toy_id | toy        |
|--------+------------|
|      5 | whiffeball |
|      6 | frisbee    |
|      9 | kite       |
|     12 | yoyo       |

| toy_id | color  |
|--------+--------|
|      5 | white  |
|      5 | yellow |
|      5 | blue   |
|      6 | green  |
|      6 | yellow |
|      9 | red    |
|      9 | blue   |
|      9 | green  |
|     12 | white  |
|     12 | yellow |
** 2NF
must be 1NF, and have no partial functional dependencies
可能的情形有三种
1. 复合主键，非复合主键的列完全取决于主键，而不是其中的部分内容
2. 整个表复合主键都是复合主键，项需要满足1
3. 设置自定义的自增主键，可以强制满足2NF
eg. 比如不设置个自增Id，那么学生ID+课程Id作为一个考试成绩，是可以满足的，但是如果，学生姓名是依赖于学生ID，因此不满足2NF，需要将学分姓名的资料切分出去
** 3NF
改非主键列，可以影响其他项，即不满足3NF，不要传递依赖
eg. 比如一个订单和一个用户的信息，可以直接塞到一起，但是用户的信息依赖于用户主键，用户主键依赖于订单主键，因此，让其满足第三范式，做法为直接砍掉除用户主键外的字段，该字段作为外键
* data move
** create table, then insert with select
#+BEGIN_SRC sql
CREATE TABLE profession{
  id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  profession varchar(20)
};

INSERT INTO profession (profession)
SELECT profession FROM my_concacts
GROUP BY profession
ORDER BY profession;
#+END_SRC
** create table with select, then alter
#+BEGIN_SRC sql
create TABLE profession AS
SELECT profession FROM my_concacts
GROUP BY profession
ORDER BY profession;

ALTER TABLE profession
ADD COLUMN id INT NOT NULL AUTO_INCREMENT FIRST,
ADD PRIMARY KEY (id);
#+END_SRC
** create, select and insert at the same time
#+BEGIN_SRC sql
CREATE TABLE profession(
  id INT(11) NOT NULL auto_increment PRIMARY KEY,
  profession VARCHAR(20)
) AS
SELECT profession FROM my_concacts
GROUP BY profession
ORDER BY profession;
#+END_SRC
* ALIAS
** table alias
简写表名，解决表明冲突，让查询的长度变少
** column alias
使列名更有意义，属于二次处理，用于使用各种应用层的ORM框架，进行字段映射自动化处理
* JOIN 
** CROSS JOIN
*** INNER JOIN
with condtion
**** NATURAL JOIN
with shared column to connect
** OUTER JOIN
** FULL JOIN
union left query and right query
* subquery
** noncorrelated subquery
子查询与外部查询独立，在外部查询执行前被DB执行
** correlated subquery
依赖于外部查询遍历时的每一项属性，极度消耗性能
#+BEGIN_SRC sql
SELECT mc.firt_name, mc.last_name
FROM my_concacts AS mc
where 3 =(
SELECT count(*) FROM contact_interest WHERE contact_id = mc.contact_id
)
#+END_SRC
** reserved word
测试子查询结果集是否为空
NOT EXISTS
EXISTS
* union
对指定的多查询语句中取出交叉字段进行合并汇总，会去重,最后视为一条最终语句
* union all
与union一样，但是不去重
* intersect
取交集
* except
A消去与B的公共部分
* security
** user controll
SET PASSWORD FOR 'root@localhost' = PASSWORD('123456') 
ALTER USER root IDENTIFIED BY 12345
CREATE USER elsie IDENTIFIED BY '123456'
** permission controll
*** grant
GRANT [permissions] ON [target such as glob or db.table] TO [username] [WITH GRANT OPTION]
GRANT SELECT/INSERT/UPDATE/DELETE/ALL ON clown_info TO elsie WITH GRANT OPTION
**** WITH GRANT OPTION
允许权限在分发
*** remove
REMOVE SELECT/INSERT/UPDATE/DELETE/ALL ON clown_info FROM elsie 
REMOVE GRANT OPTION SELECT/INSERT/UPDATE/DELETE/ALL ON clown_info FROM elsie [CASCADE/RESTRICT]
**** CASCADE
默认的回收选项，由该角色分发下去的权限一并回收
**** RESTRICT
分发下去的不回收
** role controll
CREATE ROLE [roleName]
DROP ROLE [roleName]
GRANT [permissions] ON [target such as glob or db.table] TO [roleName] [WITH GRANT OPTION]
*** WITH GRANT OPTION
允许角色分发
*** conflict
一个用户可以拥有多个角色，多角色权限冲突时，reject规则优先
