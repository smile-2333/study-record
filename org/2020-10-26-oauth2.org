#+TITLE: oauth2
#+STARTUP: indent
* mode
** authorization-code
主流授权模式，配合用户认证和website的client_id和client_secret换token，即能防止泄露的风险，又能符合website server跟踪user的activities，auth server vendor还能赚钱，一举多得
变种模式: 如wechat
[[file:~/Desktop/personal/study/img/oauth2_code_mode.webp][code mode]]
** implicit
用户自己认证后，token以hash的形式返回到redirect_url上，在offline的前端应用才有用
** password
用户丢给website server username和password，website server直接去换token，在获取user info
** client credentials
website server自己拿client_id和client_secret换token，拿自己相关的信息，或者自己自建resource server的资源
* ref
https://www.jianshu.com/p/84a4b4a1e833
http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html
https://www.cnblogs.com/xusir/p/3473554.html
* spring oauth
** client
http://localhost:56789/oauth2/authorization/github 
//必须让服务器引导redirect，不然无法获取state(除非关掉,不建议)
'/logi'n 默认的login page，会跟Security冲突，可以用order处理掉
** principle
@AuthenticationPrincipal OAuth2User user
* ref
https://160668873.gitbook.io/tkey-docs/ren-shi-jie-duan-bi-du/tkey-baisc //tkey
* core
不跨域不存在单点登录问题；
非浏览器端不存在单点登录问题；
浏览器跨域解决单点登录的方法就只有：redirect，cors
什么session，什么令牌，这些都是登录问题，不是单点登录问题。